var m=Object.defineProperty;var C=(p,e,t)=>e in p?m(p,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[e]=t;var l=(p,e,t)=>C(p,typeof e!="symbol"?e+"":e,t);import{N as P,v as k}from"./lightweight-charts.production-D96uO4Yw.js";import{g as S}from"./sample-data-x_8-FZm1.js";const E={color:"#2962FF",lineWidth:2,lineStyle:"solid",pointRadius:4,pointColor:"#2962FF"};class V{constructor(e){l(this,"_data");this._data=e}draw(e){const{points:t,options:o,tempPoint:n}=this._data;console.log("[PolylineRenderer.draw] called"),console.log("  points:",t),console.log("  points length:",t.length),console.log("  points stringified:",JSON.stringify(t)),console.log("  tempPoint:",n),console.log("  options:",o),e.useBitmapCoordinateSpace(({context:i,horizontalPixelRatio:s,verticalPixelRatio:a})=>{if(console.log("  [draw] horizontalPixelRatio:",s,"verticalPixelRatio:",a),i.save(),t.length===0&&n&&n.x!==null&&n.y!==null){i.fillStyle=o.pointColor;const r=n.x,h=n.y;console.log("    Drawing preview point at:",r,h),i.beginPath(),i.arc(Math.round(r*s),Math.round(h*a),o.pointRadius*s,0,2*Math.PI),i.fill(),i.restore();return}if(t.length===0){console.log("    No points to draw."),i.restore();return}if(console.log("    Drawing",t.length,"points"),i.strokeStyle=o.color,i.lineWidth=o.lineWidth*s,console.log("    Set strokeStyle:",o.color,"lineWidth:",i.lineWidth),o.lineStyle==="dashed"&&(o.dashPattern?(i.setLineDash(o.dashPattern.map(r=>r*s)),console.log("    Set custom dash pattern:",o.dashPattern.map(r=>r*s))):(i.setLineDash([5*s,5*s]),console.log("    Set default dash pattern:",[5*s,5*s]))),i.beginPath(),t.length>0){console.log("    Drawing polyline path");const r=t[0];if(r&&r.x!==null&&r.y!==null){const h=r.x,g=r.y;console.log(`    Move to first point: (${h}, ${g})`),i.moveTo(Math.round(h*s),Math.round(g*a));for(let c=1;c<t.length;c++){const d=t[c];if(d&&d.x!==null&&d.y!==null){const y=d.x,v=d.y;console.log(`    Line to point ${c}: (${y}, ${v})`),i.lineTo(Math.round(y*s),Math.round(v*a))}}if(n&&n.x!==null&&n.y!==null){const c=n.x,d=n.y;console.log(`    Line to temp point: (${c}, ${d})`),i.lineTo(Math.round(c*s),Math.round(d*a))}console.log("    Stroking path"),i.stroke(),console.log("    Drawing point markers"),i.fillStyle=o.pointColor;for(const c of t)if(c&&c.x!==null&&c.y!==null){const d=c.x,y=c.y;i.beginPath(),i.arc(Math.round(d*s),Math.round(y*a),o.pointRadius*s,0,2*Math.PI),i.fill()}}else console.log("    First point invalid, cannot draw polyline")}else console.log("    No valid points to draw");i.restore()})}}class ${constructor(e){l(this,"_source");l(this,"_viewPoints",[]);l(this,"_tempViewPoint",null);this._source=e}update(){console.log("🔄 PolylinePaneView.update called");const e=this._source.series,t=this._source.chart;if(console.log(`  Chart available: ${!!t}, Series available: ${!!e}`),!e||!t){console.log("⚠️ Cannot update view points: missing chart or series");return}console.log(`  Source points count: ${this._source._points.length}`),console.log("  Source points data:",JSON.stringify(this._source._points)),console.log(`  Current viewPoints before update: ${this._viewPoints.length}`,this._viewPoints);try{this._viewPoints=[],this._source._points.forEach((o,n)=>{const i=e.priceToCoordinate(o.price),a=t.timeScale().timeToCoordinate(o.time);console.log(`  Point ${n}: time=${o.time}, price=${o.price} -> x=${a}, y=${i}`),a!==null&&i!==null?this._viewPoints.push({x:a,y:i}):console.log(`  ⚠️ Skipping point ${n} with invalid coordinates`)}),console.log(`  View points after conversion: ${this._viewPoints.length}`,JSON.stringify(this._viewPoints))}catch(o){console.error("Error converting points:",o)}if(this._source._tempPoint){const o=this._source._tempPoint;try{const n=e.priceToCoordinate(o.price),s=t.timeScale().timeToCoordinate(o.time);this._tempViewPoint=s!==null&&n!==null?{x:s,y:n}:null,console.log(`  Temp point: time=${o.time}, price=${o.price} -> x=${s}, y=${n}`)}catch(n){console.error("Error converting temp point:",n),this._tempViewPoint=null}}else this._tempViewPoint=null,console.log("  No temp point to update")}renderer(){console.log("🎨 Creating renderer with",this._viewPoints.length,"points"),console.log("  ViewPoints data:",JSON.stringify(this._viewPoints));const e=new V({points:this._viewPoints,options:this._source._options,tempPoint:this._tempViewPoint});return console.log("  Created renderer:",!!e),e}}class H{constructor(e={}){l(this,"_chart",null);l(this,"_series",null);l(this,"_points",[]);l(this,"_options");l(this,"_paneViews");l(this,"_active",!1);l(this,"_clickHandler",null);l(this,"_moveHandler",null);l(this,"_keydownHandler",null);l(this,"_tempPoint",null);l(this,"_requestUpdate",null);l(this,"_toolbarContainer",null);l(this,"_toolbarButton",null);l(this,"_pointCount",0);l(this,"_betweenPolylines",!1);this._options={...E,...e},this._paneViews=[new $(this)]}setupToolbar(e){this._toolbarContainer||(this._toolbarContainer=document.createElement("div"),this._toolbarContainer.style.position="absolute",this._toolbarContainer.style.top="10px",this._toolbarContainer.style.right="10px",this._toolbarContainer.style.display="flex",this._toolbarContainer.style.gap="5px",this._toolbarContainer.style.zIndex="100",e.appendChild(this._toolbarContainer)),this._createToolbarButton()}_createToolbarButton(){if(!this._toolbarContainer)return;const e=document.createElement("div");e.style.width="32px",e.style.height="32px",e.style.borderRadius="4px",e.style.backgroundColor="rgba(255, 255, 255, 0.85)",e.style.display="flex",e.style.alignItems="center",e.style.justifyContent="center",e.style.cursor="pointer",e.style.boxShadow="0 1px 3px rgba(0, 0, 0, 0.12)",e.title="Draw Polyline",e.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="3 7 9 4 15 7 21 4"></polyline>
            <polyline points="3 17 9 14 15 17 21 14"></polyline>
        </svg>`,e.addEventListener("click",()=>{this._active?(this.deactivate(),e.style.backgroundColor="rgba(255, 255, 255, 0.85)",e.style.color="#333"):this._chart&&this._series&&(this.activate(this._chart,this._series),e.style.backgroundColor="rgba(41, 98, 255, 0.85)",e.style.color="white")}),this._toolbarContainer.appendChild(e),this._toolbarButton=e;const t=document.createElement("input");t.type="color",t.value=this._options.color,t.style.width="32px",t.style.height="32px",t.style.padding="0",t.style.border="none",t.style.borderRadius="4px",t.style.backgroundColor="rgba(255, 255, 255, 0.85)",t.style.cursor="pointer",t.title="Change Line Color",t.addEventListener("change",()=>{this.applyOptions({color:t.value,pointColor:t.value})}),this._toolbarContainer.appendChild(t);const o=document.createElement("div");o.style.width="32px",o.style.height="32px",o.style.borderRadius="4px",o.style.backgroundColor="rgba(255, 255, 255, 0.85)",o.style.display="flex",o.style.alignItems="center",o.style.justifyContent="center",o.style.cursor="pointer",o.style.boxShadow="0 1px 3px rgba(0, 0, 0, 0.12)",o.title="Clear All Points",o.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M3 6h18"></path>
            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
        </svg>`,o.addEventListener("click",()=>{this.clearPoints()}),this._toolbarContainer.appendChild(o)}activate(e,t){if(console.log("🔍 Activating polyline drawing tool"),this._active){console.log("⚠️ Drawing tool already active, ignoring activate call");return}this._chart=e,this._series=t,this._active=!0,console.log("✅ Polyline drawing mode activated"),this._toolbarButton&&(this._toolbarButton.style.backgroundColor="rgba(41, 98, 255, 0.85)",this._toolbarButton.style.color="white",console.log("🎨 Updated toolbar button appearance")),this._setupEventHandlers(),this._setupKeyboardEvents()}_setupKeyboardEvents(){this._removeKeyboardEvents(),this._keydownHandler=e=>{e.key==="Escape"&&(console.log("🔄 ESC key pressed, resetting polyline"),this._resetPolyline(),e.preventDefault())},document.addEventListener("keydown",this._keydownHandler),console.log("⌨️ Keyboard events registered")}_removeKeyboardEvents(){this._keydownHandler&&(document.removeEventListener("keydown",this._keydownHandler),this._keydownHandler=null,console.log("⌨️ Keyboard events unregistered"))}_resetPolyline(){this._points=[],this._tempPoint=null,this._pointCount=0,this._betweenPolylines=!1,this._active&&console.log("🔄 Polyline reset, ready for new drawing"),this._updateView()}_setupEventHandlers(){this._clickHandler=t=>{if(console.log("👆 Click event received",t),!this._active){console.log("⚠️ Click ignored: drawing mode not active");return}if(!t.point){console.log("⚠️ Click ignored: no point data");return}if(!t.time){console.log("⚠️ Click ignored: no time data");return}if(!this._series){console.log("⚠️ Click ignored: no series attached");return}const o=this._series.coordinateToPrice(t.point.y);if(o===null){console.log("⚠️ Click ignored: could not convert y-coordinate to price");return}this._pointCount===0&&(this.clearPoints(),this._betweenPolylines=!1,console.log("🆕 Starting new polyline"));const n={time:t.time,price:o};if(console.log(`➕ Adding point ${this._pointCount+1} at time:`,t.time,"price:",o),this._addPoint(n),this._pointCount++,this._pointCount===3){console.log("🔢 Third point added, calculating fourth point...");const i=this._points[0],s=this._points[1],a=this._points[2],r=s.price-i.price;console.log(`📊 Y-coordinate difference between points 2 and 1: ${r}`);let h;r>0?(h=a.price+Math.abs(r),console.log(`📈 Second > First, so Fourth > Third: fourth point price: ${h}`)):r<0?(h=a.price-Math.abs(r),console.log(`📉 Second < First, so Fourth < Third: fourth point price: ${h}`)):(h=a.price,console.log(`📊 Second = First, so Fourth = Third: fourth point price: ${h}`));const g={time:a.time,price:h};console.log("✅ Adding fourth point:",g),this._addPoint(g),this._pointCount++,console.log("🎨 Four-point polyline completed, deactivating drawing mode");const c=this._active;this._tempPoint=null,this._betweenPolylines=!0,this._updateView(),setTimeout(()=>{this._pointCount=0,c&&this._toolbarButton&&(this._betweenPolylines=!1,console.log("🔄 Ready for a new polyline"))},100)}},this._moveHandler=t=>{if(!this._active||this._betweenPolylines||!t.point||!t.time||!this._series){this._tempPoint!==null&&(this._tempPoint=null,this._updateView());return}const o=this._series.coordinateToPrice(t.point.y);if(o===null){this._tempPoint!==null&&(this._tempPoint=null,this._updateView());return}this._pointCount>0&&!this._betweenPolylines&&(this._tempPoint={time:t.time,price:o},this._updateView())},this._chart&&(console.log("Subscribing click handler:",!!this._clickHandler),this._chart.subscribeClick(this._clickHandler),console.log("Subscribing move handler:",!!this._moveHandler),this._chart.subscribeCrosshairMove(this._moveHandler));const e=this._chart.chartElement();console.log("Chart element exists:",!!e),e&&e.addEventListener("click",t=>{console.log("🔵 DOM click event on chart element",t),console.log("Active status:",this._active),console.log("Current points:",this._points.length)})}deactivate(){!this._active||!this._chart||(this._toolbarButton&&(this._toolbarButton.style.backgroundColor="rgba(255, 255, 255, 0.85)",this._toolbarButton.style.color="#333"),this._clickHandler&&(this._chart.unsubscribeClick(this._clickHandler),this._clickHandler=null),this._moveHandler&&(this._chart.unsubscribeCrosshairMove(this._moveHandler),this._moveHandler=null),this._removeKeyboardEvents(),this._active=!1,this._chart=null,this._series=null,this._tempPoint=null,this._pointCount=0,this._betweenPolylines=!1,this._updateView())}_addPoint(e){if(console.log("🟢 _addPoint called with:",e),e.time===void 0||e.time===null||e.price===void 0||e.price===null){console.error("❌ Cannot add point - invalid time or price:",e);return}this._points.push(e),console.log(`📊 Points array now has ${this._points.length} points:`,JSON.stringify(this._points)),this._paneViews.forEach(t=>{"update"in t&&typeof t.update=="function"&&t.update()}),this._updateView()}clearPoints(){console.log("🧹 Clearing all points"),this._points=[],this._tempPoint=null,this._pointCount=0,this._betweenPolylines=!1,this._updateView()}_updateView(){console.log("🔄 Requesting view update"),this._requestUpdate?(console.log("✅ Calling requestUpdate function"),this._requestUpdate()):console.log("⚠️ Cannot update view: requestUpdate not available")}applyOptions(e){this._options={...this._options,...e},this._updateView()}getPoints(){return[...this._points]}paneViews(){return console.log("📊 paneViews called, returning:",this._paneViews.length,"views"),console.log("  Current points count:",this._points.length),this._paneViews.length>0&&this._paneViews[0].update(),this._paneViews}attached({requestUpdate:e}){console.log("🔌 Polyline tool attached to series"),this._requestUpdate=e,console.log("✅ requestUpdate function received:",!!e)}detached(){this._removeKeyboardEvents(),this.deactivate(),this._requestUpdate=null,console.log("🔌 Polyline tool fully detached")}get chart(){return this._chart}get series(){return this._series}}const b=document.getElementById("chart"),u=window.chart=P("chart",{autoSize:!0,layout:{background:{color:"#ffffff"},textColor:"#333333"},grid:{vertLines:{color:"#f0f0f0"},horzLines:{color:"#f0f0f0"}},crosshair:{mode:1,vertLine:{visible:!0,labelVisible:!1},horzLine:{visible:!0,labelVisible:!1}}}),w=u.addSeries(k,{lineColor:"rgba(41, 98, 255, 0.7)",lineWidth:2,topColor:"rgba(41, 98, 255, 0.3)",bottomColor:"rgba(41, 98, 255, 0.1)"});w.setData(S());const _=new H({color:"#2962FF",lineWidth:2,lineStyle:"solid",pointRadius:4,pointColor:"#2962FF"});w.attachPrimitive(_);console.log("Polyline tool attached to series");b&&(_.setupToolbar(b),console.log("Toolbar setup complete"),_.activate(u,w),console.log("Polyline tool activated:",_._active),window.polylineTool=_,window.chart=u,window.lineSeries=w);const f=document.getElementById("lineStyle");f&&f.addEventListener("change",()=>{_.applyOptions({lineStyle:f.value})});u.timeScale().fitContent();window.addEventListener("resize",()=>{u.applyOptions({width:u.chartElement().clientWidth,height:u.chartElement().clientHeight})});
